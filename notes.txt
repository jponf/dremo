Implementation ideas:
	- Messages encode: XML

	- Passive Server (accept connections and answer petitions)

	- Timestamps in UTC format

	- Clients manages their own internal timer
		- Times:
			- Max time between notifications: 3s (+/-)
	
	- Server checks last update timer to force an update
		- Times:
			- Periodically check if clients data is too old (+/- 3s)

	- Stateful server

	- Connection protocol TCP (connects-send data-close)
		- Max time without interaction (1..3s)

	- Multicast Broker notify all clients 

	- Concurrent server

	- Client message between: STX [ASCII 002], ETX [ASCII 003]

XML Format (v0.05):
	
	<client name="" timestamp="dd-mm-yyyy hh:mm:ss">
		
		<os> 									[]
			<name> ... </name>					[]
			<version> ... </version>			[]
		</os>									[]

		<cpu>									[]
			<arch> ... </arch>					[]
			<model> ... </model>				[opt]
			<used> ... </used>					[1..n]
			<loadavg1> ... </loadavg1>			[unix]
			<loadavg5> ... </loadavg5>			[unix]
			<loadavg15> ... </loadavg15>		[unix]
		</cpu>									[]
		
		<memory>								[]
			<ram>								[]
				<total> ... </total>			[]
				<used> ... </used>				[]
				<free> ... </free>				[]
				<avaliable> ... </avaliable>	[]
			</ram>								[]
			<swap>								[]
				<total> ... </total>			[]
				<used> ... </used>				[]
				<free> ... </free>				[]
			</swap>								[]
		</memory>								[]
		
		<processes>								[]
			<running name=""> pid </running>	[name, 1..n]
			<started name=""> pid </started>	[name opt, 0..n]
			<finished name=""> pid </finished>	[name opt, 0..n]
		</processes>							[]

	</client>
